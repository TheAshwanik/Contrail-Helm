# Configs section
# Note: using ".." for ports, because in v1 there is a bug
# which leads to an error
# "..error unmarshaling JSON: json: cannot unmarshal number into Go value of type string.."
# (https://github.com/kubernetes/kubernetes/issues/2763)

# Meta information section

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: env
  namespace: kube-system
data:
  AAA_MODE: no-auth 
  ANALYTICS_NODES: {{.Values.masternode}} 
  ANALYTICSDB_NODES: {{.Values.masternode}}
  ANALYTICS_SNMP_NODES: {{.Values.masternode}}
  ANALYTICS_ALARM_NODES: {{.Values.masternode}}
  ANALYTICSDB_ENABLE: "true"
  ANALYTICS_ALARM_ENABLE: "true"
  ANALYTICS_SNMP_ENABLE: "true"
  AUTH_MODE: noauth
  CLOUD_ORCHESTRATOR: kubernetes 
  CONFIG_NODES: {{.Values.masternode}}
  CONFIGDB_NODES: {{.Values.masternode}}
  CONTROL_NODES: {{.Values.masternode}}
  CONTROLLER_NODES: {{.Values.masternode}}
  LOG_LEVEL: SYS_NOTICE
  PHYSICAL_INTERFACE: ""
  METADATA_PROXY_SECRET: contrail
  VROUTER_GATEWAY: ""
  RABBITMQ_NODES: {{.Values.masternode}}
  RABBITMQ_NODE_PORT: "5673"
  WEBUI_NODES: {{.Values.masternode}}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: configzookeeperenv
  namespace: kube-system
data:
  ZOOKEEPER_NODES: {{.Values.masternode}}
  ZOOKEEPER_PORT: "2181"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nodemgr-config
  namespace: kube-system
data:
  DOCKER_HOST: "unix://mnt/docker.sock"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: contrail-analyticsdb-config
  namespace: kube-system
data:
  CASSANDRA_SEEDS: {{.Values.masternode}}
  CASSANDRA_CLUSTER_NAME: Contrail
  CASSANDRA_START_RPC: "true"
  CASSANDRA_LISTEN_ADDRESS: auto
  CASSANDRA_PORT: "9160"
  CASSANDRA_CQL_PORT: "9042"
  CASSANDRA_SSL_STORAGE_PORT: "7001"
  CASSANDRA_STORAGE_PORT: "7000"
  CASSANDRA_JMX_LOCAL_PORT: "7200"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: contrail-configdb-config
  namespace: kube-system
data:
  CASSANDRA_SEEDS: {{.Values.masternode}}
  CASSANDRA_CLUSTER_NAME: ContrailConfigDB
  CASSANDRA_START_RPC: "true"
  CASSANDRA_LISTEN_ADDRESS: auto
  CASSANDRA_PORT: "9161"
  CASSANDRA_CQL_PORT: "9041"
  CASSANDRA_SSL_STORAGE_PORT: "7011"
  CASSANDRA_STORAGE_PORT: "7010"
  CASSANDRA_JMX_LOCAL_PORT: "7201"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: rabbitmq-config
  namespace: kube-system
data:
  RABBITMQ_ERLANG_COOKIE: "47EFF3BB-4786-46E0-A5BB-58455B3C2CB4"
###---
###apiVersion: v1
###kind: ConfigMap
###metadata:
###  name: kube-manager-config
###  namespace: kube-system
###data:
###  KUBERNETES_API_SERVER: {{.Values.masternode}}
###  KUBERNETES_API_SECURE_PORT: {{ .Values.k8ApiPort | quote }}
#  K8S_TOKEN_FILE: "/tmp/serviceaccount/token"
###  KUBERNETES_IP_FABRIC_SNAT: "true"
###  KUBERNETES_HOST_NETWORK_SERVICE: "true"
#### Containers section
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: config-zookeeper
  namespace: kube-system
  labels:
    app: config-zookeeper
spec:
  template:
    metadata:
      labels:
        app: config-zookeeper
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "node-role.opencontrail.org/configdb"
                operator: Exists
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      - key: node.kubernetes.io/not-ready
        operator: Exists
        effect: NoSchedule
      hostNetwork: true
      containers:
      - name: config-zookeeper
        image: "{{.Values.release}}/contrail-external-zookeeper:{{.Values.contrailTag}}"
        imagePullPolicy: ""
        env:
        - name: NODE_TYPE
          value: config-database
        envFrom:
        - configMapRef:
            name: env
        - configMapRef:
            name: configzookeeperenv
        volumeMounts:
        - mountPath: /var/lib/zookeeper
          name: zookeeper-data
        - mountPath: /var/log/zookeeper
          name: zookeeper-logs
      imagePullSecrets:
      - name: {{.Values.registry}}
      volumes:
      - name: zookeeper-data
        hostPath:
          path: /var/lib/contrail/config-zookeeper
      - name: zookeeper-logs
        hostPath:
          path: /var/log/contrail/config-zookeeper
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: contrail-analyticsdb
  namespace: kube-system
  labels:
    app: contrail-analyticsdb
spec:
  template:
    metadata:
      labels:
        app: contrail-analyticsdb
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "node-role.opencontrail.org/analyticsdb"
                operator: Exists
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      - key: node.kubernetes.io/not-ready
        operator: Exists
        effect: NoSchedule
      hostNetwork: true
      initContainers:
      - name: contrail-node-init
        image: "{{.Values.release}}/contrail-node-init:{{.Values.contrailTag}}"
        imagePullPolicy: ""
        env:
        - name: NODE_TYPE
          value: "database"
        - name: CONTRAIL_STATUS_IMAGE
          value: "{{.Values.release}}/contrail-status:{{.Values.contrailTag}}"
        envFrom:
        - configMapRef:
            name: contrail-analyticsdb-config
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /host/usr/bin
          name: host-usr-bin
        - mountPath: /host/var/lib
          name: host-var-lib
      containers:
      - name: contrail-analyticsdb-nodemgr
        image: "{{.Values.release}}/contrail-nodemgr:{{.Values.contrailTag}}"
        imagePullPolicy: ""
        securityContext:
          privileged: true
        envFrom:
        - configMapRef:
            name: env
        - configMapRef:
            name: nodemgr-config
        - configMapRef:
            name: contrail-analyticsdb-config
        env:
        - name: NODE_TYPE
          value: database
        - name: DATABASE_NODEMGR__DEFAULTS__minimum_diskGB
          value: "2"
        volumeMounts:
        - mountPath: /var/log/contrail
          name: analyticsdb-logs
        - mountPath: /mnt
          name: docker-unix-socket
      - name: contrail-analyticsdb
        image: "{{.Values.release}}/contrail-external-cassandra:{{.Values.contrailTag}}"
        imagePullPolicy: ""
        env:
        - name: NODE_TYPE
          value: database
        envFrom:
        - configMapRef:
            name: contrail-analyticsdb-config
        volumeMounts:
        - mountPath: /var/lib/cassandra
          name: analyticsdb-data
        - mountPath: /var/log/cassandra
          name: analyticsdb-logs
      - name: contrail-analytics-query-engine
        image: "{{.Values.release}}/contrail-analytics-query-engine:{{.Values.contrailTag}}"
        imagePullPolicy: ""
        securityContext:
          privileged: true
        env:
        - name: NODE_TYPE
          value: database
        envFrom:
        - configMapRef:
            name: env
        - configMapRef:
            name: configzookeeperenv
        volumeMounts:
        - mountPath: /var/log/contrail
          name: analyticsdb-logs
      imagePullSecrets:
      - name: {{.Values.registry}}
      volumes:
      - name: analyticsdb-data
        hostPath:
          path: /var/lib/contrail/analyticsdb
      - name: analyticsdb-logs
        hostPath:
          path: /var/log/contrail/analyticsdb
      - name: docker-unix-socket
        hostPath:
          path: /var/run
      - name: host-usr-bin
        hostPath:
          path: /usr/bin
      - name: host-var-lib
        hostPath:
          path: /var/lib
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: contrail-configdb
  namespace: kube-system
  labels:
    app: contrail-configdb
spec:
  template:
    metadata:
      labels:
        app: contrail-configdb
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "node-role.opencontrail.org/configdb"
                operator: Exists
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      - key: node.kubernetes.io/not-ready
        operator: Exists
        effect: NoSchedule
      hostNetwork: true
      containers:
      - name: contrail-configdb
        image: "{{.Values.release}}/contrail-external-cassandra:{{.Values.contrailTag}}"
        imagePullPolicy: ""
        env:
        - name: NODE_TYPE
          value: config-database
        envFrom:
        - configMapRef:
            name: contrail-configdb-config
        volumeMounts:
        - mountPath: /var/lib/cassandra
          name: configdb-data
        - mountPath: /var/log/cassandra
          name: configdb-logs
      imagePullSecrets:
      - name: {{.Values.registry}}
      volumes:
      - name: configdb-data
        hostPath:
          path: /var/lib/contrail/configdb
      - name: configdb-logs
        hostPath:
          path: /var/log/contrail/configdb
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: contrail-config-database-nodemgr
  namespace: kube-system
  labels:
    app: contrail-config-database-nodemgr
spec:
  template:
    metadata:
      labels:
        app: contrail-config-database-nodemgr
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "node-role.opencontrail.org/configdb"
                operator: Exists
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      - key: node.kubernetes.io/not-ready
        operator: Exists
        effect: NoSchedule
      hostNetwork: true
      initContainers:
      - name: contrail-node-init
        image: "{{.Values.release}}/contrail-node-init:{{.Values.contrailTag}}"
        imagePullPolicy: ""
        securityContext:
          privileged: true
        env:
        - name: CONTRAIL_STATUS_IMAGE
          value: "{{.Values.release}}/contrail-status:{{.Values.contrailTag}}"
        envFrom:
        - configMapRef:
            name: env
        volumeMounts:
        - mountPath: /host/usr/bin
          name: host-usr-bin
      containers:
      - name: contrail-config-database-nodemgr
        image: "{{.Values.release}}/contrail-nodemgr:{{.Values.contrailTag}}"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: env
        - configMapRef:
            name: nodemgr-config
        - configMapRef:
            name: contrail-configdb-config
        env:
        - name: NODE_TYPE
          value: config-database
        - name: CONFIG_DATABASE_NODEMGR__DEFAULTS__minimum_diskGB
          value: "2"
# todo: there is type Socket in new kubernetes, it is possible to use full
# path:
# hostPath:
#   path: /var/run/docker.sock and
#   type: Socket
        volumeMounts:
        - mountPath: /var/log/contrail
          name: configdb-logs
        - mountPath: /mnt
          name: docker-unix-socket
      imagePullSecrets:
      - name: {{.Values.registry}}
      volumes:
      - name: configdb-logs
        hostPath:
          path: /var/log/contrail/configdb
      - name: docker-unix-socket
        hostPath:
          path: /var/run
      - name: host-usr-bin
        hostPath:
          path: /usr/bin
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: contrail-analytics
  namespace: kube-system
  labels:
    app: contrail-analytics
spec:
  template:
    metadata:
      labels:
        app: contrail-analytics
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "node-role.opencontrail.org/analytics"
                operator: Exists
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      - key: node.kubernetes.io/not-ready
        operator: Exists
        effect: NoSchedule
      hostNetwork: true
      initContainers:
      - name: contrail-node-init
        image: "{{.Values.release}}/contrail-node-init:{{.Values.contrailTag}}"
        imagePullPolicy: ""
        securityContext:
          privileged: true
        env:
        - name: CONTRAIL_STATUS_IMAGE
          value: "{{.Values.release}}/contrail-status:{{.Values.contrailTag}}"
        envFrom:
        - configMapRef:
            name: env
        volumeMounts:
        - mountPath: /host/usr/bin
          name: host-usr-bin
      containers:
      - name: contrail-analytics-api
        image: "{{.Values.release}}/contrail-analytics-api:{{.Values.contrailTag}}"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: env
        - configMapRef:
            name: configzookeeperenv
        volumeMounts:
        - mountPath: /var/log/contrail
          name: analytics-logs
      - name: contrail-analytics-collector
        image: "{{.Values.release}}/contrail-analytics-collector:{{.Values.contrailTag}}"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: env
        volumeMounts:
        - mountPath: /var/log/contrail
          name: analytics-logs
      - name: contrail-analytics-nodemgr
        image: "{{.Values.release}}/contrail-nodemgr:{{.Values.contrailTag}}"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: env
        - configMapRef:
            name: configzookeeperenv
        - configMapRef:
            name: nodemgr-config
        env:
        - name: NODE_TYPE
          value: analytics
# todo: there is type Socket in new kubernetes, it is possible to use full
# path:
# hostPath:
#   path: /var/run/docker.sock and
#   type: Socket
        volumeMounts:
        - mountPath: /var/log/contrail
          name: analytics-logs
        - mountPath: /mnt
          name: docker-unix-socket
      imagePullSecrets:
      - name: {{.Values.registry}}
      volumes:
      - name: analytics-logs
        hostPath:
          path: /var/log/contrail/analytics
      - name: docker-unix-socket
        hostPath:
          path: /var/run
      - name: host-usr-bin
        hostPath:
          path: /usr/bin
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: contrail-controller-control
  namespace: kube-system
  labels:
    app: contrail-controller-control
spec:
  template:
    metadata:
      labels:
        app: contrail-controller-control
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "node-role.opencontrail.org/control"
                operator: Exists
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      - key: node.kubernetes.io/not-ready
        operator: Exists
        effect: NoSchedule
      hostNetwork: true
      initContainers:
      - name: contrail-node-init
        image: "{{.Values.release}}/contrail-node-init:{{.Values.contrailTag}}"
        imagePullPolicy: ""
        securityContext:
          privileged: true
        env:
        - name: CONTRAIL_STATUS_IMAGE
          value: "{{.Values.release}}/contrail-status:{{.Values.contrailTag}}"
        envFrom:
        - configMapRef:
            name: env
        volumeMounts:
        - mountPath: /host/usr/bin
          name: host-usr-bin
      containers:
      - name: contrail-controller-control
        image: "{{.Values.release}}/contrail-controller-control-control:{{.Values.contrailTag}}"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: env
        volumeMounts:
        - mountPath: /var/log/contrail
          name: control-logs
      - name: contrail-controller-control-dns
        image: "{{.Values.release}}/contrail-controller-control-dns:{{.Values.contrailTag}}"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: env
        volumeMounts:
        - mountPath: /etc/contrail
          name: dns-config
        - mountPath: /var/log/contrail
          name: control-logs
      - name: contrail-controller-control-named
        image: "{{.Values.release}}/contrail-controller-control-named:{{.Values.contrailTag}}"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: env
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /etc/contrail
          name: dns-config
        - mountPath: /var/log/contrail
          name: control-logs
      - name: contrail-controller-nodemgr
        image: "{{.Values.release}}/contrail-nodemgr:{{.Values.contrailTag}}"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: env
        - configMapRef:
            name: configzookeeperenv
        - configMapRef:
            name: nodemgr-config
        env:
        - name: NODE_TYPE
          value: control
# todo: there is type Socket in new kubernetes, it is possible to use full
# path:
# hostPath:
#   path: /var/run/docker.sock and
#   type: Socket
        volumeMounts:
        - mountPath: /var/log/contrail
          name: control-logs
        - mountPath: /mnt
          name: docker-unix-socket
      imagePullSecrets:
      - name: {{.Values.registry}}
      volumes:
      - name: control-logs
        hostPath:
          path: /var/log/contrail/control
      - name: docker-unix-socket
        hostPath:
          path: /var/run
      - name: dns-config
        emptyDir: {}
      - name: host-usr-bin
        hostPath:
          path: /usr/bin
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: contrail-controller-config
  namespace: kube-system
  labels:
    app: contrail-controller-config
spec:
  template:
    metadata:
      labels:
        app: contrail-controller-config
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "node-role.opencontrail.org/config"
                operator: Exists
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      - key: node.kubernetes.io/not-ready
        operator: Exists
        effect: NoSchedule
      hostNetwork: true
      initContainers:
      - name: contrail-node-init
        image: "{{.Values.release}}/contrail-node-init:{{.Values.contrailTag}}"
        imagePullPolicy: ""
        securityContext:
          privileged: true
        env:
        - name: CONTRAIL_STATUS_IMAGE
          value: "{{.Values.release}}/contrail-status:{{.Values.contrailTag}}"
        envFrom:
        - configMapRef:
            name: env
        volumeMounts:
        - mountPath: /host/usr/bin
          name: host-usr-bin
      containers:
      - name: contrail-controller-config-api
        image: "{{.Values.release}}/contrail-controller-config-api:{{.Values.contrailTag}}"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: env
        - configMapRef:
            name: configzookeeperenv
        volumeMounts:
        - mountPath: /var/log/contrail
          name: config-logs
      - name: contrail-controller-config-devicemgr
        image: "{{.Values.release}}/contrail-controller-config-devicemgr:{{.Values.contrailTag}}"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: env
        - configMapRef:
            name: configzookeeperenv
        volumeMounts:
        - mountPath: /var/log/contrail
          name: config-logs
      - name: contrail-controller-config-schema
        image: "{{.Values.release}}/contrail-controller-config-schema:{{.Values.contrailTag}}"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: env
        - configMapRef:
            name: configzookeeperenv
        volumeMounts:
        - mountPath: /var/log/contrail
          name: config-logs
      - name: contrail-controller-config-svcmonitor
        image: "{{.Values.release}}/contrail-controller-config-svcmonitor:{{.Values.contrailTag}}"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: env
        - configMapRef:
            name: configzookeeperenv
        volumeMounts:
        - mountPath: /var/log/contrail
          name: config-logs
      - name: contrail-controller-config-nodemgr
        image: "{{.Values.release}}/contrail-nodemgr:{{.Values.contrailTag}}"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: env
        - configMapRef:
            name: configzookeeperenv
        - configMapRef:
            name: nodemgr-config
        env:
        - name: NODE_TYPE
          value: config
        - name: CASSANDRA_CQL_PORT
          value: "9041"
        - name: CASSANDRA_JMX_LOCAL_PORT
          value: "7201"
        - name: CONFIG_NODEMGR__DEFAULTS__minimum_diskGB
          value: "2"
# todo: there is type Socket in new kubernetes, it is possible to use full
# path:
# hostPath:
#   path: /var/run/docker.sock and
#   type: Socket
        volumeMounts:
        - mountPath: /var/log/contrail
          name: config-logs
        - mountPath: /mnt
          name: docker-unix-socket
      imagePullSecrets:
      - name: {{.Values.registry}}
      volumes:
      - name: config-logs
        hostPath:
          path: /var/log/contrail/config
      - name: docker-unix-socket
        hostPath:
          path: /var/run
      - name: host-usr-bin
        hostPath:
          path: /usr/bin
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: redis
  namespace: kube-system
  labels:
    app: redis
spec:
  template:
    metadata:
      labels:
        app: redis
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "node-role.opencontrail.org/analytics"
                operator: Exists
            - matchExpressions:
              - key: "node-role.opencontrail.org/webui"
                operator: Exists
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      - key: node.kubernetes.io/not-ready
        operator: Exists
        effect: NoSchedule
      hostNetwork: true
      containers:
      - name: redis
        image: "{{.Values.release}}/contrail-external-redis:{{.Values.contrailTag}}"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: env
        volumeMounts:
        - mountPath: /var/lib/redis
          name: redis-data
        - mountPath: /var/log/redis
          name: redis-logs
      volumes:
      - name: redis-data
        hostPath:
          path: /var/lib/contrail/redis
      - name: redis-logs
        hostPath:
          path: /var/log/contrail/redis
      imagePullSecrets:
      - name: {{.Values.registry}}
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: rabbitmq
  namespace: kube-system
  labels:
    app: rabbitmq
spec:
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "node-role.opencontrail.org/configdb"
                operator: Exists
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      - key: node.kubernetes.io/not-ready
        operator: Exists
        effect: NoSchedule
      hostNetwork: true
      containers:
      - name: rabbitmq
        image: "{{.Values.release}}/contrail-external-rabbitmq:{{.Values.contrailTag}}"
        imagePullPolicy: ""
        env:
        - name: NODE_TYPE
          value: config-database
        envFrom:
        - configMapRef:
            name: env
        - configMapRef:
            name: rabbitmq-config
        volumeMounts:
        - mountPath: /var/lib/rabbitmq
          name: rabbitmq-data
        - mountPath: /var/log/rabbitmq
          name: rabbitmq-logs
      imagePullSecrets:
      - name: {{.Values.registry}}
      volumes:
      - name: rabbitmq-data
        hostPath:
          path: /var/lib/contrail/rabbitmq
      - name: rabbitmq-logs
        hostPath:
          path: /var/log/contrail/rabbitmq
# Meta information section
